module.exports = {
  Array: {
    from: "Array.from",
    isArray: "Array.isArray",
    of: "Array.of",
    prototype: "Array.prototype",
    "@@species": "Array[@@species]",
  },
  ArrayBuffer: {
    isView: "ArrayBuffer.isView",
    prototype: "ArrayBuffer.prototype",
    "@@species": "ArrayBuffer[@@species]",
  },
  SharedArrayBuffer: {
    prototype: "SharedArrayBuffer.prototype",
    "@@species": "SharedArrayBuffer[@@species]",
  },
  DataView: {
    prototype: "DataView.prototype",
  },
  Atomics: {
    add: "Atomics.add",
    and: "Atomics.and",
    compareExchange: "Atomics.compareExchange",
    exchange: "Atomics.exchange",
    isLockFree: "Atomics.isLockFree",
    load: "Atomics.load",
    or: "Atomics.or",
    store: "Atomics.store",
    sub: "Atomics.sub",
    wait: "Atomics.wait",
    notify: "Atomics.notify",
    xor: "Atomics.xor",
    "@@toStringTag": "Atomics[@@toStringTag]",
  },
  Date: {
    now: "Date.now",
    parse: "Date.parse",
    prototype: "Date.prototype",
    UTC: "Date.UTC",
  },
  JSON: {
    parse: "JSON.parse",
    stringify: "JSON.stringify",
    "@@toStringTag": "JSON[@@toStringTag]",
  },
  Math: {
    abs: "Math.abs",
    acos: "Math.acos",
    acosh: "Math.acosh",
    asin: "Math.asin",
    asinh: "Math.asinh",
    atan: "Math.atan",
    atanh: "Math.atanh",
    atan2: "Math.atan2",
    cbrt: "Math.cbrt",
    ceil: "Math.ceil",
    clz32: "Math.clz32",
    cos: "Math.cos",
    cosh: "Math.cosh",
    exp: "Math.exp",
    expm1: "Math.expm1",
    floor: "Math.floor",
    fround: "Math.fround",
    hypot: "Math.hypot",
    imul: "Math.imul",
    log: "Math.log",
    log1p: "Math.log1p",
    log10: "Math.log10",
    log2: "Math.log2",
    max: "Math.max",
    min: "Math.min",
    pow: "Math.pow",
    random: "Math.random",
    round: "Math.round",
    sign: "Math.sign",
    sin: "Math.sin",
    sinh: "Math.sinh",
    sqrt: "Math.sqrt",
    tan: "Math.tan",
    tanh: "Math.tanh",
    trunc: "Math.trunc",
    E: "Math.E",
    LN10: "Math.LN10",
    LN2: "Math.LN2",
    LOG10E: "Math.LOG10E",
    LOG2E: "Math.LOG2E",
    PI: "Math.PI",
    SQRT1_2: "Math.SQRT1_2",
    SQRT2: "Math.SQRT2",
    "@@toStringTag": "Math[@@toStringTag]",
  },
  Map: {
    prototype: "Map.prototype",
    "@@species": "Map[@@species]",
  },
  Number: {
    EPSILON: "Number.EPSILON",
    isFinite: "Number.isFinite",
    isInteger: "Number.isInteger",
    isNaN: "Number.isNaN",
    isSafeInteger: "Number.isSafeInteger",
    MAX_SAFE_INTEGER: "Number.MAX_SAFE_INTEGER",
    MAX_VALUE: "Number.MAX_VALUE",
    MIN_SAFE_INTEGER: "Number.MIN_SAFE_INTEGER",
    MIN_VALUE: "Number.MIN_VALUE",
    NaN: "Number.NaN",
    NEGATIVE_INFINITY: "Number.NEGATIVE_INFINITY",
    parseFloat: "Number.parseFloat",
    parseInt: "Number.parseInt",
    POSITIVE_INFINITY: "Number.POSITIVE_INFINITY",
    prototype: "Number.prototype",
  },
  Object: {
    assign: "Object.assign",
    create: "Object.create",
    defineProperties: "Object.defineProperties",
    defineProperty: "Object.defineProperty",
    entries: "Object.entries",
    freeze: "Object.freeze",
    fromEntries: "Object.fromEntries",
    getOwnPropertyDescriptor: "Object.getOwnPropertyDescriptor",
    getOwnPropertyDescriptors: "Object.getOwnPropertyDescriptors",
    getOwnPropertyNames: "Object.getOwnPropertyNames",
    getOwnPropertySymbols: "Object.getOwnPropertySymbols",
    getPrototypeOf: "Object.getPrototypeOf",
    is: "Object.is",
    isExtensible: "Object.isExtensible",
    isFrozen: "Object.isFrozen",
    isSealed: "Object.isSealed",
    keys: "Object.keys",
    preventExtensions: "Object.preventExtensions",
    prototype: "Object.prototype",
    seal: "Object.seal",
    setPrototypeOf: "Object.setPrototypeOf",
    values: "Object.values",
  },
  Promise: {
    all: "Promise.all",
    prototype: "Promise.prototype",
    race: "Promise.race",
    reject: "Promise.reject",
    resolve: "Promise.resolve",
    "@@species": "Promise[@@species]",
  },
  Set: {
    prototype: "Set.prototype",
    "@@species": "Set[@@species]",
  },
  WeakMap: {
    prototype: "WeakMap.prototype",
  },
  WeakSet: {
    prototype: "WeakSet.prototype",
  },
  String: {
    fromCharCode: "String.fromCharCode",
    fromCodePoint: "String.fromCodePoint",
    prototype: "String.prototype",
    raw: "String.raw",
  },
  Symbol: {
    asyncIterator: "Symbol.asyncIterator",
    for: "Symbol.for",
    hasInstance: "Symbol.hasInstance",
    isConcatSpreadable: "Symbol.isConcatSpreadable",
    iterator: "Symbol.iterator",
    keyFor: "Symbol.keyFor",
    match: "Symbol.match",
    matchAll: "Symbol.matchAll",
    prototype: "Symbol.prototype",
    replace: "Symbol.replace",
    search: "Symbol.search",
    species: "Symbol.species",
    split: "Symbol.split",
    toPrimitive: "Symbol.toPrimitive",
    toStringTag: "Symbol.toStringTag",
    unscopables: "Symbol.unscopables",
  },
  RegExp: {
    prototype: "RegExp.prototype",
    "@@species": "RegExp[@@species]",
  },
  Reflect: {
    apply: "Reflect.apply",
    construct: "Reflect.construct",
    defineProperty: "Reflect.defineProperty",
    deleteProperty: "Reflect.deleteProperty",
    get: "Reflect.get",
    getOwnPropertyDescriptor: "Reflect.getOwnPropertyDescriptor",
    getPrototypeOf: "Reflect.getPrototypeOf",
    has: "Reflect.has",
    isExtensible: "Reflect.isExtensible",
    ownKeys: "Reflect.ownKeys",
    preventExtensions: "Reflect.preventExtensions",
    set: "Reflect.set",
    setPrototypeOf: "Reflect.setPrototypeOf",
  },
  Proxy: {
    revocable: "Proxy.revocable",
  },
  Int8Array: {
    from: "Int8Array.from",
    of: "Int8Array.of",
    prototype: "Int8Array.prototype",
    "@@species": "Int8Array[@@species]",
    BYTES_PER_ELEMENT: "Int8Array.BYTES_PER_ELEMENT",
  },
  Uint8Array: {
    from: "Uint8Array.from",
    of: "Uint8Array.of",
    prototype: "Uint8Array.prototype",
    "@@species": "Uint8Array[@@species]",
    BYTES_PER_ELEMENT: "Uint8Array.BYTES_PER_ELEMENT",
  },
  Uint8ClampedArray: {
    from: "Uint8ClampedArray.from",
    of: "Uint8ClampedArray.of",
    prototype: "Uint8ClampedArray.prototype",
    "@@species": "Uint8ClampedArray[@@species]",
    BYTES_PER_ELEMENT: "Uint8ClampedArray.BYTES_PER_ELEMENT",
  },
  Int16Array: {
    from: "Int16Array.from",
    of: "Int16Array.of",
    prototype: "Int16Array.prototype",
    "@@species": "Int16Array[@@species]",
    BYTES_PER_ELEMENT: "Int16Array.BYTES_PER_ELEMENT",
  },
  Uint16Array: {
    from: "Uint16Array.from",
    of: "Uint16Array.of",
    prototype: "Uint16Array.prototype",
    "@@species": "Uint16Array[@@species]",
    BYTES_PER_ELEMENT: "Uint16Array.BYTES_PER_ELEMENT",
  },
  Int32Array: {
    from: "Int32Array.from",
    of: "Int32Array.of",
    prototype: "Int32Array.prototype",
    "@@species": "Int32Array[@@species]",
    BYTES_PER_ELEMENT: "Int32Array.BYTES_PER_ELEMENT",
  },
  Uint32Array: {
    from: "Uint32Array.from",
    of: "Uint32Array.of",
    prototype: "Uint32Array.prototype",
    "@@species": "Uint32Array[@@species]",
    BYTES_PER_ELEMENT: "Uint32Array.BYTES_PER_ELEMENT",
  },
  Float32Array: {
    from: "Float32Array.from",
    of: "Float32Array.of",
    prototype: "Float32Array.prototype",
    "@@species": "Float32Array[@@species]",
    BYTES_PER_ELEMENT: "Float32Array.BYTES_PER_ELEMENT",
  },
  Float64Array: {
    from: "Float64Array.from",
    of: "Float64Array.of",
    prototype: "Float64Array.prototype",
    "@@species": "Float64Array[@@species]",
    BYTES_PER_ELEMENT: "Float64Array.BYTES_PER_ELEMENT",
  },
  Function: {
    length: "Function.length",
    prototype: "Function.prototype",
  },
  location: {
    origin: "location.origin",
  },
  console: {
    assert: "console.assert",
    clear: "console.clear",
    count: "console.count",
    debug: "console.debug",
    dir: "console.dir",
    dirxml: "console.dirxml",
    error: "console.error",
    exception: "console.exception",
    group: "console.group",
    groupCollapsed: "console.groupCollapsed",
    groupEnd: "console.groupEnd",
    info: "console.info",
    log: "console.log",
    markTimeline: "console.markTimeline",
    profile: "console.profile",
    profileEnd: "console.profileEnd",
    profiles: "console.profiles",
    table: "console.table",
    time: "console.time",
    timeEnd: "console.timeEnd",
    timeStamp: "console.timeStamp",
    timeline: "console.timeline",
    timelineEnd: "console.timelineEnd",
    trace: "console.trace",
    warn: "console.warn",
  },
  document: {
    currentScript: "document.currentScript",
    getElementsByClassName: "document.getElementsByClassName",
    head: "document.head",
    querySelector: "document.querySelector",
    visibilityState: "document.visibilityState",
  },
  event: {
    focusin: "Event.focusin",
    hashchange: "Event.hashchange",
  },
  navigator: {
    geolocation: "navigator.geolocation",
    sendBeacon: "navigator.sendBeacon",
  },
  performance: {
    now: "performance.now",
    getEntries: "performance.getEntries",
    mark: "performance.mark",
    getEntriesByType: "performance.getEntriesByType",
    getEntriesByName: "performance.getEntriesByName",
    clearMarks: "performance.clearMarks",
    measure: "performance.measure",
    clearMeasures: "performance.clearMeasures",
  },
  screen: {
    orientation: "screen.orientation",
  },
};